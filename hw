#!/bin/bash

textToDate ()
{
	if [ ! "$(grep "[0-9][0-9]\.[0-9][0-9]\.[0-9][0-9]" <<< "$1")" ]
	then
		d=$(sed 's/^\(next\|n\)$/tomorrow/' <<< "$1")
		date --date="$d" +"%y.%m.%d" || exit
	else
		echo "$1";
	fi
}

checkDone ()
{
	if [ "$2"  = "done" ]
	then
		grep "^x" <<<"$1" >/dev/null && echo "$x. $1"
	elif [ "$2" = "dim" ]
	then
		grep "^x" <<<"$1" >/dev/null && echo "$(tput dim)$x. $1$(tput sgr0)"
		grep -v "^x" <<<"$1" >/dev/null && echo "$x. $1"
	else
		grep -v "^x" <<<"$1" >/dev/null && echo "$x. $1"
	fi
}

printAssignments ()
{
	today=$(textToDate "today" | tr -d '.')
	IFS=$'\n'
	if [ -n "$1" -a "$1" != "due" -a "$1" != "done" ]
	then
		inDate="$(textToDate "$1" | tr -d '.' | cut -f1)"
	fi
	x=0
	for i in $(sort -n $file | grep -v "^	")
	do
		x=$(($x+1))
		date=$(sed 's/^x//' <<<"$i" | tr -d '.' | cut -f1)
		if [ "$date" -le "$today" ]
		then
			checkDone "$i" "$1" >/dev/null && echo "$(tput bold)$(checkDone "$i" "$1")$(tput sgr0)" #TODO: AAAARRRRGGGG
		elif [ "$1" = "due" ]
		then
			break
		elif [ -n "$inDate" ]
		then
			if [ "$inDate" -eq "$date" ]
			then
				checkDone "$i" "dim"
			fi
		else
			checkDone "$i" "$1"
		fi
	done
}


file="$HOME/Documents/homework.txt"
case "$1" in
	"add")
		if [ -z "$2" ]
		then
			read -p "Due: " date
			date="$(textToDate "$date")"
			echo $date
			read -p "Class: " class
			read -p "Description: " desc
			read -p "Est. Time to Complete: " time
		else
			date="$(textToDate "$2")"
			class=$3
			desc=$4
			time=$5
			echo -n "Adding Assignment: $date	@$class	$desc	$time
Confirm [Y/n]: "
			read input
			if [ "$input" = "n" ];then exit;fi
		fi
		if [ -n "$time" ]
		then
			time="+T:$time"
		fi
		if [ -n "$class" ]
		then
			class="@$class"
		fi
		echo "Added Assignment: $date	$class	$desc	$time"
		echo "$date	$class	$desc	$time" >> "$file"
		;;

	"done")
		if [ -n "$2" ]
		then
			line="$(sort -n $file | grep -v "^x" |sed "${2}q;d")"
			sed -i "$(grep -n "$line" $file | cut -f1 -d:)s/^/x/" "$file" #TODO: AAAAAAAHHHHHH THIS IS AWFUL FIX IT PLEASE
			echo "\"$line\" marked as done"
		else
			echo "This needs an argument!"
		fi
		;;

	"show"|*)
		if [ "$1" = "show" ]
			then
			printAssignments $2
			else
			printAssignments $1
			fi
		;;
esac
