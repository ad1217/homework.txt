#!/bin/bash

readonly file="$HOME/Documents/homework.txt"

textToDate ()
{
	if [ ! "$(grep -P "(\d\d\.?){3}" <<< "$1")" ]
	then
		d=$(sed 's/^\(next\|n\)$/tomorrow/' <<< "$1")
		date --date="$d" +"%y.%m.%d" || exit
	else
		echo "$1";
	fi
}

checkDone ()
{
	isDone="$(grep -q "^x" <<<"$1" && echo true || echo false)"
	case "$2" in
		"done")
			$isDone && echo "$x. $1"
			;;

		"dim")
			$isDone && echo "$(tput dim)$x. $1$(tput sgr0)"
			$isDone || echo "$x. $1"
			;;

		"bold")
			$isDone || echo "$(tput bold)$x. $1$(tput sgr0)"
			;;

		*)
		    $isDone || echo "$x. $1"
			;;
	esac
}

printAssignments ()
{
	today=$(textToDate "today" | tr -d '.')
	IFS=$'\n'
	if [ -n "$1" -a "$1" != "due" -a "$1" != "done" ]
	then
		inDate="$(textToDate "$1" | tr -d '.' | cut -f1)"
	fi
	x=0
	for i in $(sort -n $file | grep -v "^	")
	do
		x=$(($x+1))
		date=$(sed 's/^x//' <<<"$i" | tr -d '.' | cut -f1)
		if [ "$date" -le "$today" ]
		then
			checkDone "$i" "bold"
		elif [ "$1" = "due" ]
		then
			break
		elif [ -n "$inDate" ]
		then
			if [ "$inDate" -eq "$date" ]
			then
				checkDone "$i" "dim"
			fi
		else
			checkDone "$i" "$1"
		fi
	done
}

case "$1" in
	"add")
		if [ -z "$2" ]
		then
			read -p "Due: " date
			date="$(textToDate "$date")"
			echo $date
			read -p "Class: " class
			read -p "Description: " desc
			read -p "Est. Time to Complete: " time
		else
			date="$(textToDate "$2")"
			class=$3
			desc=$4
			time=$5
		fi
	  
		if [ -n "$time" ]
		then
			time="+T:$time"
		fi
		if [ -n "$class" ]
		then
			class="@$class"
		fi

		echo -n "Adding Assignment: $date	$class	$desc	$time"
		read -p "Confirm [Y/n]: " input
		if [ "$input" = "n" ];then exit;fi
		echo "Added Assignment: $date	$class	$desc	$time"
		echo "$date	$class	$desc	$time" >> "$file"
		;;

	"done")
		if [ -n "$2" ]
		then
			line="$(sort -n $file | grep -v "^	" | sed "${2}q;d")"
			sed -i "/$line/cx$line" "$(realpath "$file")"
			echo "Marked as done:
$line"
		else
			echo "This needs an argument!"
		fi
		;;

	"edit")
		$VISUAL "$file"
		;;

	"help")
		echo "Usage:
  add [date] [class] [assignment] [time to complete]: Add a new assignment
  done [assinment number]: mark an assignment as done
  edit: open \"$VISUAL\" (\$VISUAL) for editing
  help: this help
  show [date|command]: show assignments
    [date]: prints assignments due on the date and overdue assignments
    due: show overdue assignments
    done: show completed assignments
 [date] is passed through \"date\", with n/next changed to tommorrow"
		;;

	"show"|*)
		if [ "$1" = "show" ]
		then
			printAssignments $2
		else
			printAssignments $1
		fi
		;;
esac
